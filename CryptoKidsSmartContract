// This was a guided project I found via TravisMedia Youtube Channel!
// Heres the link to the video: https://youtu.be/s9MVkHKV2Vw


pragma solidity^0.8.7;
//SPDX-License-Identifier: MIT

contract Cryptokids{
    address owner;

    event LogKidFundingRecieved(address addr, uint amount, uint contractBalance);

    constructor(){
        owner= msg.sender;
    }

    struct Kid{
        address payable walletAddress;
        string firstName;
        string lastName;
        uint releaseTime;
        uint amount;
        bool canWithdraw;
    }
    Kid[] public kids;

    modifier onlyOwner(){
        require(msg.sender==owner, "Only the owner can add kids!");
        _;
    }

    function addKid(address payable walletAddress,
        string memory firstName,
        string memory lastName,
        uint releaseTime,
        uint amount,
        bool canWithdraw) public onlyOwner{
            kids.push(Kid(
                walletAddress,
                firstName,
                lastName,
                releaseTime,
                amount,
                canWithdraw

            ));
        }
    function balanceOf() public view returns (uint){
        return address(this).balance;
    }

    function deposit(address walletAddress) payable public{
        addToKidsBalance(walletAddress);
    }

    function addToKidsBalance(address walletAddress)private{
        for(uint i=0; i< kids.length; i++){
            if(kids[i].walletAddress== walletAddress){
                kids[i].amount += msg.value;
                emit LogKidFundingRecieved(walletAddress, msg.value, balanceOf());
            }
        }
    }
    function getIndex(address walletAddress) view private returns(uint){
        for(uint i=0; i < kids.length; i++){
            if (kids[1].walletAddress== walletAddress){
                return i;
            }
        }
        return 999;
    }
    function availableToWithdraw(address walletAddress)public returns(bool){
        uint i =getIndex(walletAddress);
        require (block.timestamp > kids[i].releaseTime, "You cannot Withdraw yet!");
        if (block.timestamp> kids[i].releaseTime){
            kids[1].canWithdraw=true;
            return true;
        }else{
            return false;
        }
    }
    function withdraw (address payable walletAddress) payable public{
        uint i =getIndex(walletAddress);
        require(msg.sender==kids[i].walletAddress, "You must be the kid to Withdraw!");
        require(kids[i].canWithdraw==true, "You are not able to withdraw at this time!");
        kids[i].walletAddress.transfer(kids[i].amount);
    }





}
